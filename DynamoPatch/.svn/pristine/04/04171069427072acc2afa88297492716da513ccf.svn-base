using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.Entity;
using System.Data.Objects;
using Dynamo.Common.Constants;

namespace Dynamo.Model.Context
{
    /// <summary>
    /// Om de dynamocontext te simuleren in de unittests
    /// </summary>
    public class FakeDynamoContext : IDynamoContext
    {
        public IDbSet<OpgetredenFout> OpgetredenFouten { get; set; }
        public IDbSet<Beheerder> Beheerders { get; set; }
        public IDbSet<Band> Bands { get; set; }
        public IDbSet<ContactPersoon> ContactPersoons { get; set; }
        public IDbSet<BandType> BandTypes { get; set; }
        public IDbSet<PlanningsDag> PlanningsDagen { get; set; }
        public IDbSet<Planning> Planning { get; set; }
        public IDbSet<Boeking> Boekingen { get; set; }
        public IDbSet<Oefenruimte> Oefenruimtes { get; set; }
        public IDbSet<Tarief> Tarieven { get; set; }
        public IDbSet<Dagdeel> Dagdelen { get; set; }
        public IDbSet<Betaling> Betalingen { get; set; }
        public IDbSet<Vergoeding> Vergoedingen { get; set; }
        public IDbSet<Taak> Taken { get; set; }
        public IDbSet<Gesloten> Gesloten { get; set; }
        public IDbSet<Contract> Contracten { get; set; }
        public IDbSet<BerichtType> BerichtTypes { get; set; }
        public IDbSet<Bericht> Berichten { get; set; }
        public IDbSet<BeheerderBericht> BeheerderBerichten { get; set; }
        public IDbSet<ChangeLog> ChangeLog { get; set; }
        public IDbSet<Instelling> Instellingen { get; set; }

        public int SaveAangeroepen { get; set; }

        public FakeDynamoContext()
        {
            OpgetredenFouten = new FakeDbSet<OpgetredenFout>();
            Beheerders = new FakeDbSet<Beheerder>();
            Bands= new FakeDbSet<Band>();
            ContactPersoons = new FakeDbSet<ContactPersoon>();
            BandTypes = new FakeDbSet<BandType>();
            PlanningsDagen= new FakeDbSet<PlanningsDag>();
            Planning = new FakeDbSet<Planning>();
            Boekingen = new FakeDbSet<Boeking>();
            Oefenruimtes = new FakeDbSet<Oefenruimte>();
            Tarieven = new FakeDbSet<Tarief>();
            Dagdelen= new FakeDbSet<Dagdeel>();
            Betalingen = new FakeDbSet<Betaling>();
            Vergoedingen = new FakeDbSet<Vergoeding>();
            Taken = new FakeDbSet<Taak>();
            Gesloten = new FakeDbSet<Gesloten>();
            Contracten = new FakeDbSet<Contract>();
            Berichten = new FakeDbSet<Bericht>();
            BeheerderBerichten = new FakeDbSet<BeheerderBericht>();
            BerichtTypes = new FakeDbSet<BerichtType>();
            ChangeLog = new FakeDbSet<ChangeLog>();
            Instellingen = new FakeDbSet<Instelling>();
        }


        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            return null;
            //throw new NotImplementedException();
        }

        //Fake save methode, is eigenlijk niet nodig, maar wordt her en der natuurlijk gewoon aangeroepen...
        public int SaveChanges()
        {
            SaveAangeroepen++;
            return 1;
        }

        public void Dispose()
        {
        }

        private static IDynamoContext _currentContext = null;

        public static IDynamoContext GetInstance()
        {
            if (_currentContext == null)
            {
                _currentContext = new FakeDynamoContext();
                SetBasisgegevens(_currentContext);
            }

            return _currentContext;
        }

        public static void SetBasisgegevens(IDynamoContext context)
        {
            context.Oefenruimtes.Add(new Oefenruimte { Id = 1, Naam = "Oefenruimte 1" });
            context.Oefenruimtes.Add(new Oefenruimte { Id = 2, Naam = "Oefenruimte 2" });
            context.Oefenruimtes.Add(new Oefenruimte { Id = 3, Naam = "Oefenruimte 3" });

            context.Dagdelen.Add(new Dagdeel { Id = 1, Omschrijving = "Ochtend" });
            context.Dagdelen.Add(new Dagdeel { Id = 2, Omschrijving = "Middag" });
            context.Dagdelen.Add(new Dagdeel { Id = 3, Omschrijving = "Avond" });

            context.BerichtTypes.Add(new BerichtType { Id = 1, Omschrijving = "Intern" });
            context.BerichtTypes.Add(new BerichtType { Id = 2, Omschrijving = "Website" });
            context.BerichtTypes.Add(new BerichtType { Id = 3, Omschrijving = "Memo" });

            context.Taken.Add(new Taak { Id = 1, Omschrijving = "Beheer" });
            context.Taken.Add(new Taak { Id = 2, Omschrijving = "Diversen" });

            context.BandTypes.Add(new BandType { Id = 1, Omschrijving = "Contract" });
            context.BandTypes.Add(new BandType { Id = 2, Omschrijving = "Incidenteel" });

            var beheerder = new Beheerder { Id = 1, Naam = "Herman" };
            context.Beheerders.Add(beheerder);
            context.Vergoedingen.Add(new Vergoeding { Id = 1, BeheerderId = 1, Beheerder = beheerder, TaakId = TaakConsts.Beheer, DagdeelId = 1, Datum = DateTime.Today });

            context.Instellingen.Add(new Instelling { BedragBandWaarschuwing = 100, VergoedingBeheerder = 5, WekenIncidenteleBandsBewaren = 50, WekenVooruitBoeken = 10 });
        }


        
    }
}
